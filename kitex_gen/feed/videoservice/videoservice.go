// Code generated by Kitex v0.3.4. DO NOT EDIT.

package videoservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/evpeople/douyin/kitex_gen/feed"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*feed.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetVideos": kitex.NewMethodInfo(getVideosHandler, newGetVideosArgs, newGetVideosResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "feed",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.4",
		Extra:           extra,
	}
	return svcInfo
}

func getVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(feed.DouyinFeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(feed.VideoService).GetVideos(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideosArgs:
		success, err := handler.(feed.VideoService).GetVideos(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideosResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideosArgs() interface{} {
	return &GetVideosArgs{}
}

func newGetVideosResult() interface{} {
	return &GetVideosResult{}
}

type GetVideosArgs struct {
	Req *feed.DouyinFeedRequest
}

func (p *GetVideosArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideosArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideosArgs) Unmarshal(in []byte) error {
	msg := new(feed.DouyinFeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideosArgs_Req_DEFAULT *feed.DouyinFeedRequest

func (p *GetVideosArgs) GetReq() *feed.DouyinFeedRequest {
	if !p.IsSetReq() {
		return GetVideosArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideosArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetVideosResult struct {
	Success *feed.DouyinFeedResponse
}

var GetVideosResult_Success_DEFAULT *feed.DouyinFeedResponse

func (p *GetVideosResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideosResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideosResult) Unmarshal(in []byte) error {
	msg := new(feed.DouyinFeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideosResult) GetSuccess() *feed.DouyinFeedResponse {
	if !p.IsSetSuccess() {
		return GetVideosResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideosResult) SetSuccess(x interface{}) {
	p.Success = x.(*feed.DouyinFeedResponse)
}

func (p *GetVideosResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetVideos(ctx context.Context, Req *feed.DouyinFeedRequest) (r *feed.DouyinFeedResponse, err error) {
	var _args GetVideosArgs
	_args.Req = Req
	var _result GetVideosResult
	if err = p.c.Call(ctx, "GetVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
