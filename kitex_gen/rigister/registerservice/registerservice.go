// Code generated by Kitex v0.3.1. DO NOT EDIT.

package registerservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/evpeople/douyin/kitex_gen/rigister"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return registerServiceServiceInfo
}

var registerServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RegisterService"
	handlerType := (*rigister.RegisterService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RegisterUser": kitex.NewMethodInfo(registerUserHandler, newRegisterUserArgs, newRegisterUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "register",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(rigister.DouyinUserRegisterRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(rigister.RegisterService).RegisterUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RegisterUserArgs:
		success, err := handler.(rigister.RegisterService).RegisterUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterUserResult)
		realResult.Success = success
	}
	return nil
}
func newRegisterUserArgs() interface{} {
	return &RegisterUserArgs{}
}

func newRegisterUserResult() interface{} {
	return &RegisterUserResult{}
}

type RegisterUserArgs struct {
	Req *rigister.DouyinUserRegisterRequest
}

func (p *RegisterUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RegisterUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterUserArgs) Unmarshal(in []byte) error {
	msg := new(rigister.DouyinUserRegisterRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterUserArgs_Req_DEFAULT *rigister.DouyinUserRegisterRequest

func (p *RegisterUserArgs) GetReq() *rigister.DouyinUserRegisterRequest {
	if !p.IsSetReq() {
		return RegisterUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type RegisterUserResult struct {
	Success *rigister.DouyinUserRegisterResponse
}

var RegisterUserResult_Success_DEFAULT *rigister.DouyinUserRegisterResponse

func (p *RegisterUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RegisterUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterUserResult) Unmarshal(in []byte) error {
	msg := new(rigister.DouyinUserRegisterResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterUserResult) GetSuccess() *rigister.DouyinUserRegisterResponse {
	if !p.IsSetSuccess() {
		return RegisterUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*rigister.DouyinUserRegisterResponse)
}

func (p *RegisterUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RegisterUser(ctx context.Context, Req *rigister.DouyinUserRegisterRequest) (r *rigister.DouyinUserRegisterResponse, err error) {
	var _args RegisterUserArgs
	_args.Req = Req
	var _result RegisterUserResult
	if err = p.c.Call(ctx, "RegisterUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
